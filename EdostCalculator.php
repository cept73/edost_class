<?php
/** @noinspection HttpUrlsUsage, SpellCheckingInspection */

/*
== Класс EdostCalculation  (C) eDost.ru ======================================

    Класс служит для расчета доставки.
    
    ---------- ВНИМАНИЕ!!! ----------
    Перед использованием скопировать настройки из .env.example в .env и отредактировать
    
    Версия: 1.21 от 20.05.2023

	Функциональные возможности класса:
	  1. Передача POST запроса на сервер eDost.ru с параметрами расчета доставки.
	  2. Получение ответа с результатами расчета в формате XML с сервера eDost.ru
	  3. Разбор XML и выдача результатов в массив.

*/
class EdostCalculator
{
    /**
     * Адрес сервиса
     */
    private const SERVICE_URL = 'http://api.edost.ru/api2.php';

    public const STATUS_INCORRECT_REQUEST = '0';
    public const STATUS_OK = '1';
    public const STATUS_BLOCKED = '2';
    public const STATUS_AUTH_ERROR = '3';
    public const STATUS_WRONG_PARAMS = '4';
    public const STATUS_WRONG_LOCATION = '5';
    public const STATUS_INTERNAL_ERROR = '6';
    public const STATUS_MISSING_COMPANIES = '7';
    public const STATUS_RESPONSE_ERROR = '8';
    public const STATUS_LIMIT_EXHAUSTED = '9';
    public const STATUS_XML_PARSE_FAIL = '10';
    public const STATUS_INCORRECT_WEIGHT = '11';
    public const STATUS_MISSING_SETTINGS = '12';
    public const STATUS_REQUEST_ERROR = '14';
    public const STATUS_WRONG_CITY = '15';
    public const STATUS_CHANGE_FROM_DENIED = '16';

    public const DEFAULT_MAX_CODE = 3271;

    public const CITIES_LIST = ["Абаза", "Абакан", "Абдулино", "Абинск", "Автуры", "Агидель", "Агинское", "Агрыз", "Адлер", "Адыгейск", "Азнакаево", "Азов", "Айхал", "Ак-Довурак", "Акбулак", "Аксай", "Алагир", "Алапаевск", "Алатырь", "Алдан", "Алейск", "Александров", "Александровск", "Александровское", "Алексеевка (Белгородская область)", "Алексеевка (Самарская область)", "Алексеевское", "Алексин", "Алушта", "Альбурикент", "Альметьевск", "Амурск", "Анадырь", "Анапа", "Ангарск", "Андреевка", "Анжеро-Судженск", "Анна", "Апатиты", "Апрелевка", "Апшеронск", "Арамиль", "Аргун", "Ардон", "Арзамас", "Арзгир", "Аркадак", "Армавир", "Армянск", "Арсеньев", "Арск", "Артем", "Артемовский", "Арти", "Архангельск", "Асбест", "Асино", "Астрахань", "Атамановка", "Аткарск", "Афипский", "Ахтубинск", "Ахтырский", "Ачинск", "Ачхой-Мартан", "Аша", "Бабаево", "Бавлы", "Багаевская", "Байкальск", "Байконур", "Баймак", "Бакал", "Баксан", "Балабаново", "Балаково", "Балахна", "Балашиха", "Балашов", "Балезино", "Балей", "Балтийск", "Барабинск", "Барнаул", "Барыш", "Батайск", "Бахчисарай", "Бачатский", "Бачи-Юрт", "Башмаково", "Бежецк", "Безенчук", "Белая Глина", "Белая Калитва", "Белая Холуница", "Белгород", "Белебей", "Белев", "Белиджи", "Белово", "Белогорск (Амурская область)", "Белогорск (Республика Крым)", "Белокуриха", "Белоозерский", "Белорецк", "Белореченск", "Белоярский (Свердловская область)", "Белоярский (Ханты-Мансийский АО)", "Белый Яр", "Бердск", "Березники", "Березовка", "Березовский (Кемеровская область)", "Березовский (Свердловская область)", "Беслан", "Бийск", "Бикин", "Биробиджан", "Бирск", "Благовещенка", "Благовещенск (Амурская область)", "Благовещенск (Республика Башкортостан)", "Благодарный", "Бобров", "Боброво", "Богданович", "Богородицк", "Богородск", "Боготол", "Богучар", "Бодайбо", "Бокситогорск", "Бологое", "Болотное", "Болхов", "Большеречье", "Большие Вяземы", "Большой Камень", "Бор", "Борзя", "Борисовка", "Борисоглебск", "Боровичи", "Боровск", "Боровский", "Бородино", "Братск", "Бронницы", "Брюховецкая", "Брянск", "Бугры", "Бугульма", "Бугуруслан", "Буденновск", "Бузулук", "Буинск", "Буй", "Буйнакск", "Бутурлиновка", "Быково", "Валдай", "Валуйки", "Ванино", "Варениковская", "Васильево", "Великие Луки", "Великий Новгород", "Великий Устюг", "Вельск", "Венев", "Верещагино", "Верхнеднепровский", "Верхний Тагил", "Верхний Уфалей", "Верхняя Пышма", "Верхняя Салда", "Ветлужский", "Вешенская", "Видное", "Вилюйск", "Вилючинск", "Вихоревка", "Вичуга", "Владивосток", "Владикавказ", "Владимир", "Власиха", "ВНИИССОК", "Внуково", "Волгоград", "Волгодонск", "Волгореченск", "Волжск", "Волжский", "Вологда", "Володарск", "Волоколамск", "Волоконовка", "Волосово", "Волхов", "Вольск", "Воргашор", "Воркута", "Воронеж", "Воротынск", "Ворсма", "Воскресенск", "Воткинск", "Врангель", "Всеволожск", "Вуктыл", "Выборг", "Выкса", "Вырица", "Выселки", "Высокая Гора", "Высоковск", "Вытегра", "Вычегодский", "Вышний Волочек", "Вяземский", "Вязники", "Вязьма", "Вятские Поляны", "Гаврилов-Ям", "Гагарин", "Гаджиево", "Гай", "Галич", "Гатчина", "Гвардейск", "Геленджик", "Георгиевск", "Гиагинская", "Глазов", "Голицыно", "Горно-Алтайск", "Горнозаводск", "Горный", "Горняк (Алтайский край)", "Горняк (Челябинская область)", "Городец", "Городище", "Гороховец", "Горьковский", "Горячеводский", "Горячий ключ", "Грамотеино", "Грибановский", "Грозный", "Грязи", "Грязовец", "Губаха", "Губкин", "Губкинский", "Гудермес", "Гуково", "Гулькевичи", "Гурьевск (Калининградская область)", "Гурьевск (Кемеровская область)", "Гусев", "Гусиноозерск", "Гусь-Хрустальный", "Давлеканово", "Дагестанские Огни", "Далматово", "Дальнегорск", "Дальнереченск", "Данилов", "Данков", "Дегтярск", "Дедовск", "Дербент", "Десногорск", "Джалиль", "Джанкой", "Дзержинск", "Дзержинский", "Дивногорск", "Дивное", "Дигора", "Димитровград", "Динская", "Дмитриев", "Дмитров", "Добрянка", "Долгопрудный", "Долинск", "Домодедово", "Донецк", "Донское", "Донской", "Дрезна", "Дрожжино", "Дубна", "Дубовка", "Дугулубгей", "Дудинка", "Дюртюли", "Дятьково", "Евпатория", "Егорлыкская", "Егорьевск", "Ейск", "Екатеринбург", "Елабуга", "Елань", "Елец", "Елизаветинская", "Елизово", "Еманжелинск", "Емва", "Емельяново", "Енисейск", "Ермолино", "Ершов", "Ессентуки", "Ессентукская", "Ефремов", "Жатай", "Железноводск", "Железногорск (Красноярский край)", "Железногорск (Курская область)", "Железногорск-Илимский", "Железнодорожный", "Жердевка", "Жигулевск", "Жирновск", "Жуков", "Жуковка", "Жуковский", "Забайкальск", "Завитинск", "Заводоуковск", "Заводской (Приморский край)", "Заводской (Республика Северная Осетия - Алания)", "Заволжск", "Заволжье", "Заинск", "Закаменск", "Заозерный", "Заполярный", "Запрудня", "Зарайск", "Заречный (Пензенская область)", "Заречный (Свердловская область)", "Заринск", "Засечное", "Звенигово", "Звенигород", "Зверево", "Зеленогорск (Красноярский край)", "Зеленогорск (Ленинградская область)", "Зеленоград", "Зеленоградск", "Зеленодольск", "Зеленокумск", "Зеленчукская", "Зерноград", "Зея", "Зима", "Зимовники", "Златоуст", "Змеиногорск", "Знаменка", "Знаменск", "Зубова Поляна", "Зуевка", "Ивангород", "Иваново", "Ивантеевка", "Ивдель", "Игра", "Ижевск", "Избербаш", "Излучинск", "Изобильный", "Иланский", "Иловля", "Ильинский", "Ильский", "им. Морозова", "им. Свердлова", "Инза", "Инкерман", "Иноземцево", "Инской", "Инта", "Ипатово", "Ирбит", "Иркутск", "Исилькуль", "Искитим", "Истра", "Ишеевка", "Ишим", "Ишимбай", "Йошкар-Ола", "Каа-Хем", "Кавалерово", "Кадуй", "Казань", "Кайеркан", "Калач", "Калач-на-Дону", "Калачинск", "Калининград", "Калининец", "Калинино", "Калининск", "Калтан", "Калуга", "Калязин", "Камбарка", "Каменка", "Каменоломни", "Каменск-Уральский", "Каменск-Шахтинский", "Камень-на-Оби", "Камешково", "Камские Поляны", "Камызяк", "Камышин", "Камышлов", "Канаш", "Кандалакша", "Каневская", "Канск", "Кантемировка", "Кантышево", "Карабаново", "Карабаш", "Карабулак", "Карасук", "Карачаевск", "Карачев", "Каргополь", "Карпинск", "Карталы", "Карымское", "Касимов", "Касли", "Каспийск", "Катав-Ивановск", "Катайск", "Качканар", "Кашин", "Кашира", "Кедровка", "Кемерово", "Кемь", "Керчь", "Киевский", "Кизел", "Кизилюрт", "Кизляр", "Кимовск", "Кимры", "Кингисепп", "Кинель", "Кинель-Черкассы", "Кинешма", "Киреевск", "Киренск", "Киржач", "Кириши", "Киров (Калужская область)", "Киров (Кировская область)", "Кировград", "Кирово-Чепецк", "Кировск (Ленинградская область)", "Кировск (Мурманская область)", "Кирс", "Кирсанов", "Киселевск", "Кисловодск", "Клетня", "Климово", "Климовск", "Клин", "Клинцы", "Ковдор", "Ковров", "Ковылкино", "Когалым", "Кодинск", "Козельск", "Козьмодемьянск", "Кокошкино", "Коломна", "Колпашево", "Колпино", "Колывань", "Кольцово (Новосибирская область)", "Кольцово (Свердловская область)", "Кольчугино", "Коммунар", "Коммунарка", "Комсомольск-на-Амуре", "Комсомольский", "Конаково", "Кондопога", "Кондрово", "Коноша", "Константиновск", "Копейск", "Кораблино", "Кореновск", "Коркино", "Королев", "Корсаков", "Коряжма", "Косая Гора", "Костомукша", "Кострома", "Котельники", "Котельниково", "Котельнич", "Котлас", "Котово", "Котовск", "Кохма", "Коченево", "Кочубеевское", "Красково", "Красноармейск (Московская область)", "Красноармейск (Саратовская область)", "Краснобродский", "Красновишерск", "Красногвардейское", "Красногорск", "Красногорский", "Краснодар", "Красное Село", "Краснозаводск", "Краснознаменск", "Краснокаменск", "Краснокамск", "Краснообск", "Красноперекопск", "Краснослободск", "Краснотурьинск", "Красноуральск", "Красноуфимск", "Красноярск", "Красный Кут", "Красный Сулин", "Кременки", "Кронштадт", "Кропоткин", "Крыловская", "Крымск", "Крюково", "Кстово", "Кубинка", "Кувандык", "Кудрово", "Кудымкар", "Кузнецк", "Кузьмоловский", "Куйбышев", "Кукмор", "Кулебаки", "Кулешовка", "Кулунда", "Кумертау", "Кунгур", "Купино", "Курагино", "Курган", "Курганинск", "Куровское", "Курск", "Куртамыш", "Курчалой", "Курчатов", "Куса", "Кушва", "Кущевская", "Кызыл", "Кыштым", "Кяхта", "Лабинск", "Лабытнанги", "Лагань", "Ладожская", "Лазаревский", "Лакинск", "Лангепас", "Лебедянь", "Ленинградская", "Ленинкент", "Лениногорск", "Ленинск", "Ленинск-Кузнецкий", "Ленск", "Лермонтов", "Лесной", "Лесной Городок", "Лесозаводск", "Лесосибирск", "Ливны", "Ликино-Дулево", "Линево", "Липецк", "Лиски", "Лихославль", "Лобня", "Лодейное Поле", "Ломоносов", "Лопатино", "Лосино-Петровский", "Луга", "Луза", "Лукоянов", "Луховицы", "Лучегорск", "Лысково", "Лысьва", "Лыткарино", "Львовский", "Льгов", "Люберцы", "Любинский", "Людиново", "Лянтор", "Магадан", "Магас", "Магдагачи", "Магнитогорск", "Майкоп", "Майма", "Майский", "Малаховка", "Малая Вишера", "Малгобек", "Малоярославец", "Мамадыш", "Мамедкала", "Мантурово", "Мариинск", "Маркова", "Маркс", "Маслянино", "Матвеев Курган", "Махачкала", "Мга", "Мегион", "Медведево", "Медведовская", "Медвежьегорск", "Медногорск", "Межгорье", "Междуреченск", "Междуреченский", "Меленки", "Мелеуз", "Менделеевск", "Мензелинск", "Металлострой", "Миасс", "Миллерово", "Минеральные Воды", "Минусинск", "Мирный (Архангельская область)", "Мирный (Республика Саха (Якутия))", "Митино", "Михайлов", "Михайловка", "Михайловск", "Михнево", "Мичуринск", "Могойтуй", "Могоча", "Можайск", "Можга", "Моздок", "Мокшан", "Монино", "Мончегорск", "Морозовск", "Моршанск", "Москва", "Московский", "Мосрентген", "Мостовской", "Муравленко", "Мурино", "Мурманск", "Мурмаши", "Муром", "Муромцево", "Мценск", "Мыски", "Мытищи", "Набережные Челны", "Навашино", "Навля", "Надым", "Назарово", "Назрань", "Называевск", "Нальчик", "Нариманов", "Наро-Фоминск", "Нарткала", "Нарышкино", "Нарьян-Мар", "Нахабино", "Находка", "Невель", "Невельск", "Невинномысск", "Невьянск", "Незлобная", "Некрасовка", "Некрасовский", "Нелидово", "Неман", "Нерехта", "Нерчинск", "Нерюнгри", "Нестеровская", "Нефтегорск", "Нефтекамск", "Нефтекумск", "Нефтеюганск", "Нижневартовск", "Нижнекамск", "Нижнеудинск", "Нижний Ломов", "Нижний Новгород", "Нижний Тагил", "Нижняя Мактама", "Нижняя Салда", "Нижняя Тура", "Никель", "Николаевск", "Николаевск-на-Амуре", "Никольск", "Никольско-Архангельский", "Никольское", "Новая Ляля", "Новая Усмань", "Новоалександровск", "Новоалтайск", "Новоаннинский", "Нововоронеж", "Новодвинск", "Новое Девяткино", "Новозыбков", "Новокручининский", "Новокубанск", "Новокузнецк", "Новокуйбышевск", "Новомихайловский", "Новомичуринск", "Новомосковск", "Новопавловск", "Новопокровская", "Новороссийск", "Новосемейкино", "Новосибирск", "Новосиликатный", "Новосинеглазово", "Новоспасское", "Новотитаровская", "Новотроицк", "Новоузенск", "Новоульяновск", "Новоуральск", "Новочебоксарск", "Новочеркасск", "Новошахтинск", "Новый Городок", "Новый Кяхулай", "Новый Оскол", "Новый Уренгой", "Ногинск", "Ноглики", "Норильск", "Ноябрьск", "Нурлат", "Нытва", "Нягань", "Нязепетровск", "Няндома", "Обнинск", "Обоянь", "Обухово", "Обь", "Одинцово", "Озерный", "Озерск", "Озеры", "Октябрьск", "Октябрьский (Московская область)", "Октябрьский (Республика Башкортостан)", "Окуловка", "Оленегорск", "Омск", "Омутнинск", "Онега", "Онохой", "Опочка", "Орел", "Оренбург", "Орехово-Зуево", "Орловский", "Орск", "Оса", "Осинники", "Осташков", "Остров", "Острогожск", "Отрадная", "Отрадное", "Отрадный", "Оха", "Очер", "Павлово", "Павловск (Алтайский край)", "Павловск (Воронежская область)", "Павловск (Ленинградская область)", "Павловская", "Павловский Посад", "Палласовка", "Пангоды", "Парголово", "Партизанск", "Пашковский", "Пенза", "Первомайск", "Первомайский (Забайкальский край)", "Первомайский (Тамбовская область)", "Первомайский (Челябинская область)", "Первоуральск", "Пересвет", "Переславль-Залесский", "Пермь", "Персиановский", "Пестово", "Петергоф", "Петров Вал", "Петровск", "Петровск-Забайкальский", "Петрозаводск", "Петропавловск-Камчатский", "Петухово", "Петушки", "Печора", "Пикалево", "Пионерский", "Питкяранта", "Плавск", "Пласт", "Плесецк", "Поворино", "Пограничный", "Подольск", "Подпорожье", "Пойковский", "Покачи", "Покров", "Полазна", "Полевской", "Полтавская", "Полысаево", "Полярные Зори", "Полярный", "Поронайск", "Похвистнево", "Почеп", "Правдинский", "Приволжск", "Приволжский", "Придонской", "Приморско-Ахтарск", "Приозерск", "Приютово", "Прокопьевск", "Пролетарск", "Промышленная", "Протвино", "Прохладный", "Псебай", "Псков", "Пугачев", "Путилково", "Пушкин", "Пушкино", "Пущино", "Пыть-Ях", "Пятигорск", "Радужный (Владимирская область)", "Радужный (Ханты-Мансийский автономный округ)", "Раевский", "Развилка", "Разумное", "Райчихинск", "Ракитное", "Раменское", "Рассказово", "Ревда", "Редкино", "Реж", "Реутов", "Рефтинский", "Ржев", "Ровеньки", "Родники", "Роза", "Рославль", "Россошь", "Ростов", "Ростов-на-Дону", "Рошаль", "Рощино", "Рощинский", "Ртищево", "Рубцовск", "Руза", "Рузаевка", "Рыбинск", "Рыбное", "Рыльск", "Ряжск", "Рязань", "Саки", "Салават", "Салехард", "Сальск", "Самара", "Санкт-Петербург", "Саракташ", "Саранск", "Сарапул", "Саратов", "Саров", "Сасово", "Сатка", "Сафоново", "Саяногорск", "Саянск", "Свердловский", "Светлогорск", "Светлоград", "Светлый (Калининградская область)", "Светлый (Саратовская область)", "Светлый Яр", "Светогорск", "Свирск", "Свободный", "Свободы", "Севастополь", "Северное Бутово", "Северный", "Северо-Задонск", "Северобайкальск", "Северодвинск", "Североморск", "Североуральск", "Северск", "Северская", "Сегежа", "Селенгинск", "Сельцо", "Селятино", "Семендер", "Семенов", "Семикаракорск", "Семилуки", "Сергач", "Сергиев Посад", "Сердобск", "Серов", "Серпухов", "Сертолово", "Сестрорецк", "Сибай", "Сиверский", "Сим", "Симферополь", "Скопин", "Славгород", "Славянка", "Славянск-на-Кубани", "Сланцы", "Слободской", "Слюдянка", "Смоленск", "Смышляевка", "Снежинск", "Снежногорск", "Собинка", "Советск (Калининградская область)", "Советск (Кировская область)", "Советская Гавань", "Советский (Республика Марий Эл)", "Советский (Ханты-Мансийский АО)", "Сокол", "Соликамск", "Солнечногорск", "Солнечнодольск", "Солнечный", "Соль-Илецк", "Сорочинск", "Сорск", "Сортавала", "Сосенский", "Сосновка", "Сосновоборск", "Сосновый Бор", "Сосногорск", "Софрино", "Сочи", "Спасск-Дальний", "Среднеуральск", "Средняя Ахтуба", "Ставрополь", "Старая Купавна", "Старая Русса", "Стародуб", "Староминская", "Старощербиновская", "Старый Оскол", "Степное", "Стерлитамак", "Стрежевой", "Стрельна", "Строитель (Белгородская область)", "Строитель (Тамбовская область)", "Стройкерамика", "Струнино", "Ступино", "Суворов", "Суворовская", "Судак", "Судогда", "Сузун", "Сунжа", "Сураж", "Сургут", "Суровикино", "Сурхахи", "Сухиничи", "Суходол", "Сухой Лог", "Сходня", "Сызрань", "Сыктывкар", "Сысерть", "Сясьстрой", "Тавда", "Таврическое", "Таганрог", "Тайга", "Тайшет", "Талдом", "Талица", "Талнах", "Таловая", "Тальменка", "Тамбов", "Тара", "Тарки", "Тарко-Сале", "Татарск", "Таштагол", "Тбилисская", "Тверь", "Тейково", "Темрюк", "Терек", "Тетюши", "Тимашевск", "Тихвин", "Тихорецк", "Тобольск", "Товарково", "Тогучин", "Тольятти", "Томилино", "Томск", "Топки", "Торжок", "Торопец", "Тосно", "Тоцкое Второе", "Трехгорный", "Троицк (Московская область)", "Троицк (Челябинская область)", "Троицкая", "Трубчевск", "Трудовое", "Туапсе", "Туймазы", "Тула", "Тулун", "Туринск", "Тутаев", "Тучково", "Тында", "Тырныауз", "Тюкалинск", "Тюмень", "Тяжинский", "Ува", "Уварово", "Углич", "Удачный", "Удельная", "Удомля", "Ужур", "Узловая", "Улан-Удэ", "Ульяновка", "Ульяновск", "Унеча", "Урай", "Уренгой", "Урень", "Урус-Мартан", "Уруссу", "Урюпинск", "Усинск", "Усмань", "Усолье-Сибирское", "Уссурийск", "Усть-Абакан", "Усть-Джегута", "Усть-Донецкий", "Усть-Илимск", "Усть-Катав", "Усть-Кинельский", "Усть-Кут", "Усть-Лабинск", "Усть-Ордынский", "Уфа", "Ухта", "Учалы", "Учкекен", "Уяр", "Федоровский", "Феодосия", "Фокино (Брянская область)", "Фокино (Приморский край)", "Фролово", "Фрязино", "Фряново", "Фурманов", "Хабаровск", "Хадыженск", "Ханты-Мансийск", "Харабали", "Хасавюрт", "Хвалынск", "Хилок", "Химки", "Холмск", "Холмская", "Хотьково", "Цивильск", "Цимлянск", "Цоцин-Юрт", "Чайковский", "Чалтырь", "Чапаевск", "Чаплыгин", "Чебаркуль", "Чебоксары", "Чегдомын", "Чегем", "Челябинск", "Чердаклы", "Черемхово", "Черепаново", "Череповец", "Черкесск", "Черлак", "Черниговка", "Черноголовка", "Черногорск", "Черноморское", "Чернушка", "Чернышевск", "Чернянка", "Черняховск", "Чехов", "Чистополь", "Чита", "Чишмы", "Чкаловск", "Чудово", "Чулым", "Чунский", "Чусовой", "Шагонар", "Шадринск", "Шали", "Шамхал", "Шарыпово", "Шарья", "Шатура", "Шаховская", "Шахты", "Шахунья", "Шебекино", "Шексна", "Шелехов", "Шерегеш", "Шерловая Гора", "Шилка", "Шилово", "Шимановск", "Шлиссельбург", "Шумерля", "Шумиха", "Шушары", "Шушенское", "Шуя", "Щекино", "Щелкино", "Щелково", "Щербинка", "Щигры", "Экажево", "Электрогорск", "Электросталь", "Электроугли", "Элиста", "Эльбан", "Энгельс", "Энем", "Эртиль", "Юбилейный", "Югорск", "Южа", "Южно-Сахалинск", "Южно-Сухокумск", "Южное Бутово", "Южноуральск", "Южный", "Юрга", "Юрьев-Польский", "Юрюзань", "Яблоновский", "Якутск", "Ялта", "Ялуторовск", "Янаул", "Яранск", "Яровое", "Ярославль", "Ярцево", "Ясногорск", "Ясный", "Яхрома", "Яшкино", "Яя", "Oшская область", "Акмолинская область", "Актюбинская область", "Алматинская область", "Алтайский край", "Амурская область", "Арагацотнская область", "Араратская область", "Армавирская область", "Архангельская область", "Астраханская область", "Атырауская область", "Байконур", "Баткенская область", "Белгородская область", "Бишкек", "Брестская область", "Брянская область", "Вайоцдзорская область", "Витебская область", "Владимирская область", "Волгоградская область", "Вологодская область", "Воронежская область", "Восточно-Казахстанская область", "Гехаркуникская область", "Гомельская область", "Гродненская область", "Джалал-Абадская область", "Еврейская АО", "Ереван", "Жамбылская область", "Забайкальский край", "Западно-Казахстанская область", "Ивановская область", "Иркутская область", "Иссык-Кульская область", "Кабардино-Балкарская Республика", "Калининградская область", "Калужская область", "Камчатский край", "Карагандинская область", "Карачаево-Черкесская Республика", "Кемеровская область", "Кировская область", "Костанайская область", "Костромская область", "Котайкская область", "Краснодарский край", "Красноярский край", "Курганская область", "Курская область", "Кызылординская область", "Ленинградская область", "Липецкая область", "Лорийская область", "Магаданская область", "Мангистауская область", "Минская область", "Могилевская область", "Московская область", "Мурманская область", "Нарынская область", "Ненецкий АО", "Нижегородская область", "Новгородская область", "Новосибирская область", "Омская область", "Оренбургская область", "Орловская область", "Ош", "Павлодарская область", "Пензенская область", "Пермский край", "Приморский край", "Псковская область", "Республика Адыгея", "Республика Алтай", "Республика Башкортостан", "Республика Бурятия", "Республика Дагестан", "Республика Ингушетия", "Республика Калмыкия", "Республика Карелия", "Республика Коми", "Республика Крым", "Республика Марий Эл", "Республика Мордовия", "Республика Саха (Якутия)", "Республика Северная Осетия - Алания", "Республика Татарстан", "Республика Тыва", "Республика Хакасия", "Ростовская область", "Рязанская область", "Самарская область", "Саратовская область", "Сахалинская область", "Свердловская область", "Северо-Казахстанская область", "Смоленская область", "Ставропольский край", "Сюникская область", "Тавушская область", "Таласская область", "Тамбовская область", "Тверская область", "Томская область", "Тульская область", "Туркестанская область", "Тюменская область", "Удмуртская Республика", "Ульяновская область", "Хабаровский край", "Ханты-Мансийский АО", "Челябинская область", "Чеченская Республика", "Чувашская Республика", "Чуйская область", "Чукотский АО", "Ширакская область", "Ямало-Ненецкий АО", "Ярославская область"];
    public const CITIES_TO_REGION_LIST = [19, 19, 56, 23, 20, 2, 75, 16, 23, 1, 16, 61, 14, 17, 56, 61, 15, 66, 21, 14, 22, 33, 59, 26, 31, 63, 16, 71, 91, 5, 16, 27, 87, 23, 38, 50, 42, 36, 51, 50, 23, 66, 20, 15, 52, 26, 64, 23, 91, 25, 16, 25, 66, 66, 29, 66, 70, 30, 75, 64, 23, 30, 23, 24, 20, 74, 35, 16, 61, 38, 90, 2, 74, 7, 40, 64, 52, 50, 64, 18, 75, 39, 54, 22, 73, 61, 91, 42, 20, 58, 69, 63, 23, 61, 43, 31, 2, 71, 5, 42, 28, 91, 22, 50, 2, 23, 66, 86, 86, 54, 59, 24, 42, 66, 15, 22, 27, 79, 2, 22, 28, 2, 26, 36, 50, 66, 71, 52, 24, 36, 38, 47, 69, 54, 57, 55, 50, 25, 52, 75, 31, 36, 53, 40, 72, 24, 38, 50, 23, 32, 47, 16, 56, 26, 56, 16, 44, 5, 36, 50, 53, 31, 27, 23, 16, 60, 53, 35, 29, 71, 59, 67, 66, 74, 66, 66, 44, 61, 50, 14, 41, 38, 37, 25, 15, 33, 50, 50, 50, 34, 61, 44, 12, 34, 35, 52, 50, 31, 47, 47, 64, 11, 11, 36, 40, 52, 50, 18, 25, 47, 11, 47, 52, 47, 23, 16, 50, 35, 29, 69, 27, 33, 67, 43, 76, 67, 51, 56, 44, 47, 39, 23, 26, 1, 18, 50, 4, 59, 75, 22, 74, 52, 34, 33, 34, 26, 23, 42, 36, 20, 48, 35, 59, 31, 89, 20, 61, 23, 39, 42, 39, 3, 33, 2, 5, 45, 25, 25, 76, 48, 66, 50, 5, 67, 16, 91, 52, 50, 24, 26, 15, 73, 23, 46, 50, 59, 50, 65, 50, 61, 26, 71, 50, 50, 50, 34, 7, 24, 2, 32, 91, 61, 50, 23, 66, 16, 34, 48, 23, 41, 74, 11, 24, 24, 40, 64, 26, 26, 71, 14, 26, 24, 46, 38, 50, 68, 63, 34, 40, 32, 50, 75, 28, 72, 25, 15, 37, 52, 16, 3, 24, 51, 50, 50, 58, 66, 22, 58, 12, 50, 61, 24, 47, 50, 39, 16, 26, 9, 61, 28, 38, 61, 74, 22, 57, 30, 13, 43, 47, 37, 50, 66, 18, 18, 5, 86, 26, 24, 34, 50, 23, 47, 47, 73, 91, 26, 42, 11, 26, 66, 38, 55, 54, 50, 73, 72, 2, 12, 17, 25, 35, 16, 24, 36, 34, 55, 39, 50, 23, 64, 42, 40, 69, 18, 58, 61, 66, 61, 22, 33, 16, 30, 34, 66, 21, 51, 23, 24, 36, 6, 33, 74, 6, 54, 9, 32, 29, 66, 74, 75, 62, 74, 5, 74, 45, 66, 69, 50, 42, 42, 10, 91, 50, 59, 5, 5, 71, 69, 47, 63, 63, 37, 71, 38, 33, 47, 40, 43, 66, 43, 47, 51, 43, 68, 42, 26, 32, 32, 50, 50, 32, 51, 33, 13, 86, 24, 40, 12, 50, 50, 70, 47, 54, 54, 66, 33, 47, 50, 27, 13, 69, 10, 40, 29, 61, 74, 62, 23, 74, 50, 65, 29, 71, 10, 44, 50, 34, 43, 29, 34, 68, 37, 54, 26, 50, 50, 64, 42, 59, 26, 50, 74, 23, 47, 50, 50, 75, 59, 54, 91, 34, 66, 66, 66, 24, 64, 61, 40, 47, 23, 23, 23, 50, 52, 50, 56, 47, 59, 58, 47, 54, 16, 52, 61, 22, 2, 59, 54, 24, 45, 23, 50, 46, 45, 20, 46, 74, 66, 23, 17, 74, 3, 23, 89, 8, 23, 23, 33, 86, 48, 23, 5, 16, 34, 42, 14, 26, 66, 50, 25, 24, 57, 50, 54, 48, 36, 69, 50, 47, 47, 50, 50, 47, 43, 52, 50, 25, 52, 59, 50, 50, 46, 50, 55, 40, 86, 49, 6, 28, 74, 1, 4, 7, 50, 53, 6, 40, 16, 5, 44, 42, 38, 64, 54, 61, 5, 47, 86, 12, 23, 10, 56, 2, 42, 86, 33, 2, 16, 16, 47, 74, 61, 26, 24, 29, 14, 50, 62, 34, 26, 50, 68, 75, 75, 50, 18, 15, 58, 50, 51, 61, 68, 50, 50, 50, 23, 89, 47, 51, 51, 33, 55, 57, 42, 50, 16, 52, 32, 89, 24, 6, 55, 7, 30, 50, 7, 57, 83, 50, 25, 60, 65, 26, 66, 26, 50, 50, 69, 39, 44, 75, 14, 6, 63, 2, 26, 86, 86, 16, 38, 58, 52, 66, 16, 66, 66, 51, 34, 27, 58, 50, 47, 66, 36, 26, 22, 34, 36, 29, 47, 32, 75, 23, 42, 63, 23, 62, 71, 26, 23, 23, 63, 54, 22, 74, 73, 23, 56, 64, 73, 66, 21, 61, 61, 42, 5, 31, 89, 50, 65, 24, 89, 16, 59, 86, 74, 29, 40, 46, 50, 54, 50, 69, 74, 50, 63, 50, 2, 53, 51, 55, 43, 29, 3, 60, 57, 56, 50, 61, 56, 59, 42, 69, 60, 36, 23, 47, 63, 65, 59, 52, 22, 36, 47, 23, 50, 34, 89, 47, 25, 23, 58, 52, 75, 68, 74, 66, 50, 76, 59, 61, 53, 47, 34, 64, 75, 10, 41, 45, 33, 11, 47, 39, 10, 71, 74, 29, 36, 25, 50, 47, 86, 86, 33, 59, 66, 23, 42, 51, 51, 65, 63, 32, 50, 37, 64, 36, 23, 47, 2, 42, 61, 42, 50, 7, 23, 60, 64, 50, 47, 50, 50, 86, 26, 33, 86, 2, 50, 31, 28, 31, 50, 68, 66, 69, 66, 50, 66, 69, 31, 37, 74, 67, 36, 76, 61, 50, 47, 63, 64, 22, 50, 13, 76, 62, 46, 62, 62, 91, 2, 89, 61, 63, 47, 56, 13, 18, 64, 52, 62, 74, 67, 19, 38, 50, 39, 26, 39, 64, 34, 47, 38, 28, 26, 91, 50, 31, 71, 3, 29, 51, 66, 70, 23, 10, 3, 32, 50, 5, 52, 61, 36, 52, 50, 58, 66, 50, 47, 47, 2, 47, 74, 91, 62, 22, 25, 23, 47, 43, 38, 67, 63, 74, 51, 33, 39, 43, 27, 12, 86, 35, 59, 50, 26, 27, 56, 56, 19, 10, 40, 43, 24, 47, 11, 50, 23, 25, 66, 34, 26, 50, 53, 32, 23, 23, 31, 64, 2, 70, 47, 31, 68, 63, 33, 50, 71, 26, 91, 33, 54, 6, 32, 86, 34, 6, 40, 63, 66, 50, 63, 11, 66, 47, 66, 55, 61, 42, 38, 50, 66, 24, 36, 22, 68, 55, 5, 89, 54, 42, 23, 69, 37, 23, 7, 16, 23, 47, 23, 72, 40, 54, 63, 50, 70, 42, 69, 69, 47, 56, 74, 50, 74, 6, 32, 25, 23, 2, 71, 38, 66, 76, 50, 28, 7, 55, 72, 42, 18, 68, 76, 14, 50, 69, 24, 71, 3, 47, 73, 32, 86, 89, 52, 20, 16, 34, 11, 48, 38, 25, 19, 9, 61, 38, 74, 63, 38, 23, 38, 2, 11, 2, 9, 24, 86, 91, 32, 25, 34, 50, 50, 37, 27, 23, 86, 30, 5, 64, 75, 50, 65, 23, 50, 21, 61, 20, 59, 61, 63, 48, 74, 21, 27, 7, 74, 73, 38, 54, 35, 9, 55, 25, 50, 19, 91, 59, 75, 31, 39, 50, 16, 75, 2, 52, 53, 54, 38, 59, 17, 45, 20, 5, 24, 44, 50, 50, 61, 52, 31, 35, 38, 42, 75, 75, 62, 28, 47, 21, 45, 47, 24, 37, 71, 91, 50, 50, 46, 6, 50, 50, 50, 8, 27, 64, 1, 36, 50, 86, 37, 65, 5, 50, 74, 22, 42, 33, 74, 1, 14, 91, 72, 2, 43, 22, 76, 67, 71, 56, 50, 42, 42];
    public const REGIONS_LIST = ["", "Республика Адыгея", "Республика Башкортостан", "Республика Бурятия", "Республика Алтай", "Республика Дагестан", "Республика Ингушетия", "Кабардино-Балкарская Республика", "Республика Калмыкия", "Карачаево-Черкесская Республика", "Республика Карелия", "Республика Коми", "Республика Марий Эл", "Республика Мордовия", "Республика Саха (Якутия)", "Республика Северная Осетия - Алания", "Республика Татарстан", "Республика Тыва", "Удмуртская Республика", "Республика Хакасия", "Чеченская Республика", "Чувашская Республика", "Алтайский край", "Краснодарский край", "Красноярский край", "Приморский край", "Ставропольский край", "Хабаровский край", "Амурская область", "Архангельская область", "Астраханская область", "Белгородская область", "Брянская область", "Владимирская область", "Волгоградская область", "Вологодская область", "Воронежская область", "Ивановская область", "Иркутская область", "Калининградская область", "Калужская область", "Камчатский край", "Кемеровская область", "Кировская область", "Костромская область", "Курганская область", "Курская область", "Ленинградская область", "Липецкая область", "Магаданская область", "Московская область", "Мурманская область", "Нижегородская область", "Новгородская область", "Новосибирская область", "Омская область", "Оренбургская область", "Орловская область", "Пензенская область", "Пермский край", "Псковская область", "Ростовская область", "Рязанская область", "Самарская область", "Саратовская область", "Сахалинская область", "Свердловская область", "Смоленская область", "Тамбовская область", "Тверская область", "Томская область", "Тульская область", "Тюменская область", "Ульяновская область", "Челябинская область", "Забайкальский край", "Ярославская область", "", "", "Еврейская АО", "", "", "", "Ненецкий АО", "", "", "Ханты-Мансийский АО", "Чукотский АО", "", "Ямало-Ненецкий АО", "Байконур", "Республика Крым"];

    private const CRC_LIST = [0, 44589, 63642, 19872, 49065, 30625, 39840, 51484, 11118, 1368, 44448, 24303, 5468, 7774, 56506, 26203, 37429, 51460, 64227, 31089, 52253, 19661, 47817, 56812, 10784, 12574, 16497, 24274, 19856, 1717, 48850, 3811, 33612, 8087, 26120, 27857, 52643, 29453, 7445, 45699, 25000, 12593, 8027, 42097, 173, 6429, 55984, 22279, 5712, 16232, 25073, 8916, 28287, 15592, 48164, 52813, 7732, 9443, 33066, 7686, 55948, 44418, 59967, 54083, 58855, 16119, 40704, 59128, 54992, 63168, 47980, 27304, 3945, 31733, 20260, 14435, 37509, 49790, 64805, 36193, 11643, 51790, 27911, 62617, 20382, 60718, 26404, 51035, 20630, 25672, 34281, 48124, 26636, 52894, 2077, 5292, 30718, 30838, 24182, 58552, 59311, 21183, 25265, 58729, 38096, 38365, 9383, 30954, 20197, 33224, 40774, 38491, 61825, 30911, 6091, 1057, 46122, 5772, 6480, 57980, 55784, 7558, 32061, 47601, 43351, 7294, 40081, 16412, 46157, 54719, 25218, 64004, 41309, 32063, 25239, 62779, 6603, 27086, 9451, 39423, 38723, 14462, 21200, 44893, 47746, 39693, 29976, 43762, 25125, 53112, 63505, 20673, 31449, 15126, 60997, 27711, 30917, 26138, 21878, 34495, 25180, 64885, 13427, 27337, 10579, 42901, 26363, 32226, 25993, 4464, 59956, 27681, 61475, 7637, 7555, 12699, 32561, 48305, 629, 18884, 56296, 59263, 17415, 21456, 29085, 59009, 26415, 15166, 30668, 52887, 42765, 4383, 7730, 32573, 36995, 24202, 17815, 55308, 59337, 64922, 28253, 49107, 14948, 7764, 58747, 55509, 19697, 1115, 18773, 26928, 32165, 47637, 22556, 57638, 56612, 17137, 8859, 25454, 10555, 15600, 63591, 54451, 42153, 62018, 46436, 121, 39446, 3434, 58876, 20497, 29792, 17717, 11298, 38298, 35305, 4101, 32612, 8113, 34106, 50351, 14438, 54521, 13368, 21882, 2, 38439, 4055, 7441, 42180, 34340, 47267, 60600, 25374, 30844, 46056, 47437, 3428, 57172, 2195, 33121, 51950, 20776, 59083, 15214, 60086, 56895, 18129, 12013, 7820, 57666, 23216, 49967, 43492, 57603, 6783, 40695, 3323, 33354, 43758, 53404, 46779, 37735, 29178, 10049, 41053, 30992, 1156, 42355, 38388, 64559, 29771, 46426, 24648, 41078, 9135, 3795, 5319, 35388, 19155, 20754, 31102, 1464, 9983, 16604, 44928, 25519, 64976, 5158, 59074, 27172, 9347, 62072, 25853, 26806, 60574, 50855, 18522, 20833, 53807, 47086, 24854, 38383, 16225, 15905, 38116, 41648, 12522, 21967, 25288, 18184, 9592, 21446, 25479, 14328, 11563, 28232, 56077, 19870, 45763, 55234, 18407, 27493, 14168, 37042, 33394, 5802, 25957, 56579, 32768, 55886, 60563, 63151, 59202, 52793, 1159, 47564, 49731, 7088, 54403, 28420, 59541, 39272, 25347, 19304, 47707, 18314, 55759, 11792, 54222, 33788, 52990, 29800, 35711, 52466, 50371, 13159, 65414, 27814, 3674, 39312, 60524, 54909, 12206, 42259, 2023, 12493, 25640, 47136, 52849, 21381, 60749, 31511, 12897, 60397, 29617, 39735, 64575, 65301, 58394, 36880, 38112, 32555, 51070, 31921, 99, 34280, 53098, 42763, 15681, 43882, 60953, 4505, 56775, 62440, 42175, 25267, 22320, 8898, 45242, 61050, 55725, 37629, 58410, 49079, 44910, 64870, 4583, 56727, 53026, 5685, 13705, 12517, 16332, 25556, 52423, 26777, 4126, 56413, 12550, 14063, 6443, 5557, 15807, 19135, 34493, 23400, 18861, 41873, 28032, 49011, 33448, 37253, 25704, 29024, 25626, 10124, 9775, 5752, 33855, 59146, 61581, 18292, 12217, 23589, 32927, 52104, 55168, 22390, 11565, 63203, 59987, 1200, 36588, 8579, 11856, 21862, 36528, 1677, 8012, 50006, 40684, 18138, 12830, 14671, 57736, 18533, 45584, 23424, 10055, 24541, 42307, 707, 30315, 36825, 1042, 64646, 9742, 3274, 5391, 61842, 29854, 59485, 35677, 55638, 4842, 37108, 24237, 35669, 58588, 21516, 38149, 16795, 49245, 852, 8386, 59573, 40295, 35362, 42484, 17508, 32037, 24001, 28170, 24262, 321, 8429, 63991, 49033, 19122, 42472, 17140, 52184, 19768, 40436, 19576, 47790, 13428, 45581, 58964, 1521, 2544, 42596, 35536, 12755, 6365, 16690, 52638, 59985, 14696, 18063, 8945, 14621, 31268, 47640, 57340, 11330, 39097, 16985, 38827, 34033, 54980, 1796, 2271, 36726, 51954, 53745, 19374, 25320, 40551, 37109, 45856, 21631, 21331, 9843, 9961, 13857, 36217, 56188, 47449, 36990, 30929, 13776, 20579, 61686, 53148, 61734, 62186, 51571, 39584, 61679, 242, 41802, 5786, 41333, 28588, 40769, 5650, 3627, 19008, 47104, 29309, 28349, 27006, 59161, 18134, 49672, 40214, 6281, 34579, 60488, 65333, 46224, 13138, 21447, 15909, 45062, 2290, 27141, 57124, 20434, 32855, 40027, 19849, 462, 49745, 49677, 64674, 7993, 41083, 18876, 8020, 57794, 3046, 60803, 36184, 14847, 51234, 24728, 62771, 28800, 36701, 46449, 7048, 6323, 14287, 12922, 9322, 62163, 27021, 35267, 23697, 61370, 9257, 16025, 2039, 1279, 18382, 16532, 9698, 3731, 51694, 29984, 44894, 54491, 8266, 9537, 60883, 47698, 28617, 14419, 14604, 49356, 42975, 2988, 63415, 56274, 53362, 53057, 10262, 39498, 32103, 41866, 53505, 10622, 34119, 43587, 57880, 39949, 56832, 21610, 13768, 51023, 22004, 17210, 5388, 55359, 54311, 17207, 14717, 17394, 26436, 16136, 55557, 37922, 38132, 31473, 33413, 36258, 18375, 6871, 4326, 1266, 17380, 26756, 13257, 9567, 25178, 61645, 58429, 34863, 25162, 14350, 8105, 56499, 12723, 63557, 51605, 2921, 61754, 48975, 12144, 45962, 6528, 1187, 8886, 42684, 15947, 38427, 18083, 18931, 57591, 41545, 32720, 49257, 690, 36897, 6127, 7705, 26272, 24439, 29910, 53114, 19794, 60245, 12315, 25867, 51990, 42113, 49561, 1096, 63781, 36810, 34021, 50145, 43648, 64689, 8100, 11740, 41409, 33473, 19426, 10820, 3280, 62488, 29649, 45580, 21217, 4178, 29565, 23333, 17163, 29718, 7638, 58751, 37043, 22630, 41629, 42781, 32107, 7005, 37401, 17117, 27996, 22070, 3005, 8792, 16001, 42638, 16222, 51276, 26865, 50419, 38750, 23022, 12406, 25809, 24723, 55423, 19574, 7367, 19540, 37738, 22223, 61885, 39078, 4960, 16325, 38612, 6137, 54964, 1048, 51058, 32214, 15644, 2365, 5890, 22051, 61097, 55728, 59909, 32737, 58614, 2814, 57926, 23745, 34059, 55954, 44775, 49767, 7785, 13299, 57885, 29541, 49293, 39328, 42556, 58254, 9487, 53832, 28078, 31457, 7329, 58470, 15479, 18357, 5189, 35484, 37821, 61554, 5910, 64525, 23793, 11462, 61681, 3451, 31701, 52097, 8667, 58118, 27140, 61583, 870, 51806, 47599, 25582, 51086, 11615, 62866, 22547, 44847, 12747, 29739, 8140, 29693, 6376, 5191, 13542, 65302, 46371, 31753, 56597, 31894, 28252, 16072, 7159, 11818, 25872, 60433, 60798, 15482, 45442, 47015, 63046, 7714, 5438, 18436, 57723, 16063, 43935, 22923, 46833, 9972, 8842, 3854, 27335, 41593, 26527, 17133, 24952, 30007, 40588, 25507, 29084, 56334, 46087, 56390, 2590, 50637, 28713, 11694, 17145, 56228, 26870, 41781, 54674, 61818, 46527, 33033, 15249, 41736, 47401, 8558, 33780, 47911, 3819, 46818, 7221, 63065, 19314, 59939, 18161, 56303, 1118, 39303, 14341, 47182, 29364, 28297, 52375, 54318, 23272, 20906, 8111, 23212, 50780, 58686, 28542, 15223, 17217, 6258, 1537, 63868, 5016, 63058, 41464, 38290, 17329, 39145, 53185, 6343, 62456, 10012, 18056, 21301, 35024, 29661, 32836, 25513, 38817, 4047, 33042, 47259, 59885, 48205, 2653, 29840, 25390, 14329, 18016, 55167, 20683, 41450, 51267, 11127, 13501, 3635, 29345, 53578, 23870, 55195, 10059, 16711, 27256, 14162, 39307, 54202, 14645, 29384, 46925, 57796, 19080, 62835, 27620, 2769, 18576, 13531, 2058, 61967, 14649, 21148, 51408, 55191, 65130, 26692, 60374, 21880, 65381, 28442, 64713, 53441, 45228, 30197, 43364, 64604, 54966, 35201, 60739, 44482, 44010, 62058, 54873, 56140, 65397, 20519, 594, 40128, 49075, 57256, 59774, 2632, 58967, 46942, 17768, 41749, 14614, 62135, 45620, 18358, 26517, 56501, 4909, 39877, 44677, 44315, 6264, 59144, 47503, 7668, 28244, 63978, 11104, 20644, 57814, 14580, 25420, 28569, 64781, 20575, 36368, 56858, 42987, 56849, 65013, 6560, 34635, 42091, 44016, 18049, 59958, 3649, 47106, 46226, 5092, 49806, 2184, 11581, 16024, 31976, 9848, 2341, 32035, 23529, 27309, 35748, 53761, 9030, 20271, 21191, 16073, 12920, 5274, 44845, 40594, 2312, 60841, 37300, 27966, 53363, 63801, 26998, 28348, 15293, 20583, 12656, 27710, 49895, 21432, 38209, 19252, 63167, 23722, 2532, 14716, 58312, 786, 379, 26629, 20402, 25422, 22781, 16779, 39095, 45662, 32972, 53930, 32521, 21064, 21958, 40400, 10364, 12734, 26663, 47402, 48509, 59459, 53950, 64353, 53298, 27664, 59989, 35367, 8552, 33647, 16164, 52133, 60858, 23914, 37618, 54075, 24468, 17310, 33776, 59349, 22636, 10621, 16010, 53658, 23669, 29031, 9995, 38534, 5234, 63614, 8710, 29297, 19072, 26449, 51659, 12271, 48378, 52703, 57939, 23330, 35417, 18666, 21644, 15932, 14986, 35310, 61086, 50293, 51836, 49533, 49099, 7636, 60779, 1061, 39991, 37664, 21220, 46817, 8959, 19101, 17687, 12133, 40021, 2420, 27794, 28632, 46867, 7227, 55768, 5989, 58431, 8933, 10103, 2865, 19699, 55062, 64078, 15949, 21980, 20433, 22397, 54462, 2450, 33700, 22633, 22632, 36156, 25091, 27522, 19568, 12525, 19029, 60695, 28092, 53314, 38134, 38019, 42236, 20702, 38813, 43903, 37921, 1567, 54488, 64288, 47323, 25610, 34319, 20058, 65423, 54025, 9590, 48900, 1981, 60758, 38572, 48224, 25228, 19907, 36148, 35075, 9850, 64671, 62929, 24465, 60621, 6497, 10625, 48355, 1866, 914, 21893, 47480, 24386, 46890, 9363, 1565, 60102, 784, 36137, 7871, 8660, 31884, 65345, 59059, 62537, 19193, 42172, 13980, 4466, 7615, 25147, 22608, 4271, 32431, 29650, 63758, 10389, 26084, 12720, 34405, 60643, 34442, 26214, 34866, 24210, 6148, 2937, 5892, 32746, 32875, 5850, 62290, 60672, 42481, 51385, 10671, 36399, 11611, 35553, 30446, 34893, 5224, 62302, 37037, 30963, 62197, 20734, 51325, 5131, 54740, 47081, 41076, 12701, 47627, 17007, 36170, 31968, 16597, 37651, 49091, 5434, 5631, 27064, 53869, 60790, 15380, 19915, 17331, 44289, 17460, 8411, 53751, 39514, 30115, 24522, 17503, 40536, 50894, 53591, 21162, 29189, 55917, 40931, 22317, 25499, 16887, 27619, 13762, 25650, 46827, 52695, 14098, 41157, 6353, 14662, 17383, 26927, 62514, 43657, 26114, 847, 28986, 20432, 47434, 9506, 41504, 51502, 38616, 47361, 10102, 4000, 33087, 48490, 17270, 43450, 49439, 50700, 38500, 61353, 51997, 45767, 23468, 51362, 65025, 19847, 60492, 62493, 12765, 53351, 64681, 26977, 13101, 44786, 28652, 29590, 64959, 57949, 26849, 48340, 14499, 8818, 21401, 29302, 35983, 15971, 15676, 21859, 45693, 62194, 11845, 14627, 52041, 44863, 11067, 7187, 26709, 10544, 25756, 63421, 36605, 61746, 8300, 29490, 175, 28927, 10841, 30749, 45671, 26501, 60946, 50617, 54308, 47394, 28389, 17984, 16363, 26265, 45815, 46840, 32810, 38216, 40531, 45832, 49391, 3057, 57711, 64734, 64220, 60795, 20459, 58285, 38890, 31412, 204, 695, 13518, 22257, 6163, 51577, 38466, 48893, 22606, 43961, 15084, 16372, 56687, 33869, 65229, 11786, 53704, 45433, 54923, 21368, 7393, 19429, 3394, 17357, 40639, 37894, 24811, 61530, 29285, 25339, 57816, 8929, 30580, 46050, 15146, 51374, 35638, 14071, 38606, 1854, 17132, 37312, 10046, 32429, 26443, 29939, 57622, 33262, 4112, 2617, 7899, 23397, 6815, 56329, 25095, 26216, 55890, 7596, 31623, 26493, 11595, 50336, 20076, 44469, 11384, 45554, 60272, 10636, 6652, 62613, 37080, 16689, 22440, 10781, 6910, 59955, 42997, 23098, 811, 1164, 7060, 33796, 14497, 12396, 41378, 58265, 11806, 34907, 11269, 9685, 30015, 22527, 64643, 23949, 22784, 48583, 59786, 28288, 21146, 30693, 20359, 11317, 2737, 20256, 62630, 49059, 20624, 55085, 8903, 34354, 32079, 55264, 6291, 47188, 39434, 7190, 14845, 60144, 7616, 46898, 51988, 11070, 56276, 55426, 26894, 44795, 63997, 57616, 33098, 35911, 57148, 13223, 17209, 5440, 32100, 15591, 26796, 48532, 39396, 166, 27216, 52560, 11767, 12381, 26924, 35659, 12106, 38135, 49101, 28200, 62755, 57369, 10354, 33019, 36415, 38160, 36616, 4211, 45333, 56756, 7481, 55275, 44372, 26859, 6081, 8781, 30529, 46448, 49144, 22907, 5258, 41469, 62687, 61690, 16435, 64395, 5029, 37289, 31020, 20230, 44004, 33975, 5312, 6590, 24446, 11386, 28944, 30845, 7696, 31702, 57182, 39243, 61527, 60469, 44420, 32243, 45976, 24321, 4103, 8984, 48577, 26260, 61657, 54339, 59785, 7471, 64638, 1105, 59693, 43303, 39766, 15105, 24605, 4193, 46126, 63045, 61411, 24420, 4914, 56536, 56497, 18452, 30541, 8909, 7839, 22301, 2832, 58135, 43013, 32297, 55540, 10153, 20558, 31916, 39538, 35807, 44766, 10432, 37444, 21014, 10365, 41329, 56559, 17550, 36360, 12941, 60736, 13206, 39166, 60166, 5010, 23321, 4240, 10183, 11580, 37727, 4209, 44393, 17545, 54084, 24915, 9014, 44987, 16042, 7697, 62948, 35448, 28403, 39749, 33076, 60011, 50625, 42222, 26577, 51343, 17413, 30776, 52320, 27731, 20259, 10100, 22951, 30107, 55803, 31571, 23664, 48845, 46984, 52090, 31695, 31610, 41907, 59387, 24792, 11489, 50611, 11375, 162, 23026, 7015, 8692, 52781, 10067, 21915, 6828, 18261, 2675, 33618, 23457, 7521, 47771, 7618, 48489, 12176, 42779, 57104, 64061, 43534, 49886, 26354, 41589, 33966, 5236, 8493, 46899, 17578, 545, 60986, 36317, 32023, 59897, 58419, 28543, 291, 15914, 19048, 56015, 55715, 32718, 3127, 18736, 41676, 15933, 42315, 46872, 39534, 33458, 22562, 60737, 33714, 9751, 26814, 50161, 22514, 46649, 44683, 10472, 51377, 52360, 32475, 65486, 5736, 29208, 13196, 44693, 2911, 36394, 15646, 24371, 7296, 973, 59377, 19398, 30152, 64743, 8108, 21037, 20756, 46631, 25023, 20804, 50678, 21825, 43755, 61990, 16441, 64072, 51660, 20915, 56545, 61608, 28921, 23959, 31169, 47417, 59528, 14612, 61676, 45052, 19464, 28555, 890, 36039, 3524, 58245, 2415, 309, 10140, 38192, 3016, 53345, 22306, 44148, 33710, 11798, 9853, 61908, 37122, 35627, 43622, 39286, 43644, 43371, 10946, 31521, 59241, 18536, 45895, 53847, 30824, 37822, 41609, 40069, 8510, 57547, 34846, 31966, 20239, 53488, 60849, 43172, 6925, 3969, 56353, 24364, 22641, 50701, 61336, 43714, 28098, 2038, 55601, 17379, 39526, 28209, 33721, 26374, 37596, 5023, 21608, 59082, 19437, 26688, 47041, 64782, 59613, 33915, 11401, 25748, 35249, 30219, 50448, 2886, 47312, 44200, 3881, 29719, 46339, 25677, 43300, 8287, 56707, 43493, 49919, 40168, 42225, 45752, 38047, 337, 14495, 51025, 14121, 10060, 16353, 11647, 32641, 17886, 4234, 23927, 25034, 4397, 6448, 23635, 22272, 35551, 27453, 27173, 64651, 43412, 41210, 44065, 16780, 61590, 47208, 46274, 63262, 37061, 43380, 61738, 9668, 43150, 57519, 12461, 18550, 61912, 5458, 31105, 34969, 23594, 2242, 12981, 10655, 20818, 20769, 14945, 25352, 56504, 53291, 28182, 62110, 55041, 8689, 64033, 45420, 29504, 53265, 53080, 38474, 31825, 30296, 3120, 1211, 23474, 16762, 57350, 8975, 13158, 38239, 54381, 23716, 56709, 44402, 1282, 7850, 36340, 37430, 40927, 29549, 22628, 2461, 52463, 37649, 9280, 33982, 35662, 14285, 57072, 5035, 35982, 25244, 32625, 13800, 49276, 21947, 51785, 16035, 17261, 63699, 8256, 26040, 60987, 12948, 29973, 39578, 59596, 57966, 11312, 4023, 9211, 11619, 37207, 13407, 63111, 59561, 999, 22813, 21973, 28015, 36687, 55039, 51340, 20586, 61245, 4335, 42933, 53820, 49, 64686, 42513, 32120, 31669, 2764, 39367, 4507, 6647, 21886, 34886, 31987, 62552, 2975, 59551, 53141, 48588, 61021, 29495, 29112, 13761, 8414, 2141, 17134, 10285, 11684, 31129, 44925, 39238, 57652, 57220, 7322, 27870, 58273, 54697, 53081, 26703, 48161, 4955, 46251, 25276, 16287, 13839, 2329, 56716, 34091, 54678, 65337, 26840, 24700, 48025, 6978, 39045, 48617, 13591, 50952, 2770, 24634, 422, 49785, 36689, 19062, 54137, 5317, 33490, 27280, 58268, 14496, 30655, 30360, 18599, 21274, 7480, 17400, 10446, 8904, 18109, 33619, 7030, 43907, 61386, 52895, 31400, 51009, 57486, 2336, 17897, 34375, 17126, 56802, 21342, 65209, 63339, 46761, 22694, 48822, 1891, 57083, 29614, 22164, 24838, 14122, 18751, 14918, 19998, 64677, 16936, 22949, 38275, 22666, 48655, 13547, 55719, 11329, 35591, 36514, 20985, 47715, 29756, 22276, 20539, 32286, 37962, 47204, 18417, 32434, 16612, 19467, 49415, 63718, 41706, 38758, 55122, 61329, 52125, 47786, 49509, 21735, 9019, 42662, 16195, 32426, 55139, 49858, 8252, 48901, 64793, 50935, 27078, 36731, 28586, 62639, 60422, 43811, 64607, 49986, 5915, 12037, 46726, 32065, 40732, 35647, 58476, 40939, 55682, 34686, 47407, 33094, 32941, 22373, 37402, 35956, 37343, 39990, 29194, 6210, 50773, 33586, 56655, 41021, 48029, 10672, 39553, 19266, 29191, 31115, 36187, 34988, 9417, 12032, 52158, 26979, 2439, 37661, 34306, 37591, 17111, 9304, 47411, 30425, 30549, 56358, 42378, 39952, 30584, 9166, 13258, 42388, 41665, 33738, 30640, 57647, 39248, 40758, 24355, 41952, 14088, 24217, 346, 10785, 60381, 60247, 4090, 4052, 37385, 22650, 34727, 25892, 7026, 8378, 23698, 14982, 2710, 50632, 23708, 14998, 27460, 28765, 652, 5797, 18199, 24486, 21985, 15537, 6638, 55069, 22798, 31839, 553, 4368, 28376, 15586, 62918, 20846, 57167, 56384, 31897, 37827, 4457, 5981, 171, 53852, 19931, 34872, 51707, 49084, 15181, 42761, 59081, 6295, 40666, 15469, 14220, 12345, 53200, 23248, 55049, 46950, 63721, 52243, 17555, 16355, 9262, 52963, 51077, 63205, 61351, 6233, 45783, 3148, 13244, 52116, 53907, 9459, 34746, 41718, 35966, 20023, 37027, 65356, 43586, 43700, 22034, 32320, 27419, 24609, 46215, 19183, 57882, 25551, 58316, 57261, 10644, 34035, 46057, 22488, 29552, 64576, 12122, 2293, 55751, 29136, 24017, 42334, 61804, 65077, 65249, 4237, 29749, 19020, 10421, 23234, 60289, 31263, 20901, 49580, 25396, 9552, 22679, 25405, 13724, 62517, 47842, 32149, 5711, 47399, 57887, 60128, 7150, 12393, 19832, 56919, 45489, 8075, 29461, 10532, 37089, 9335, 14860, 32312, 63188, 484, 19017, 34324, 17510, 33357, 2209, 12640, 38780, 61685, 34651, 62906, 3604, 1082, 56086, 42223, 40739, 30499, 13422, 62313, 48119, 48553, 15628, 50105, 6811, 17061, 46788, 41909, 31754, 59686, 60115, 38875, 21348, 28380, 12128, 5111, 54188, 2164, 7436, 11541, 25574, 58771, 25952, 44692, 32263, 56878, 15798, 49383, 57037, 7042, 26583, 54404, 47862, 8757, 18686, 57296, 3874, 17738, 18866, 63745, 59310, 49484, 30797, 28115, 27958, 57280, 30030, 45344, 14574, 18038, 29582, 37753, 13608, 64712, 58107, 28109, 7117, 22487, 58551, 7869, 15797, 64082, 54860, 55291, 2387, 27820, 16759, 10777, 31114, 16390, 54290, 7259, 63521, 33102, 52971, 60844, 29967, 26902, 51795, 53433, 14923, 49630, 53590, 52261, 14804, 35668, 27802, 36512, 15423, 41485, 23896, 37702, 39476, 6660, 9856, 59073, 4336, 63743, 38995, 40497, 24063, 6584, 5173, 13589, 39279, 42930, 63678, 48465, 57674, 45974, 38199, 42143, 35740, 50051, 46567, 22941, 34816, 18610, 31386, 6809, 8377, 34778, 12146, 48635, 43381, 43291, 3546, 55397, 36127, 45027, 3343, 61672, 28083, 39026, 8858, 14283, 1836, 12140, 10406, 10371, 36827, 44969, 27406, 38381, 55587, 4864, 44110, 45406, 6362, 31739, 31812, 63800, 36494, 5594, 7597, 5135, 44884, 28222, 1454, 27214, 651, 3285, 42040, 17088, 3512, 45640, 18775, 52425, 45355, 1203, 35458, 40539, 50160, 1073, 4415, 63136, 64876, 52792, 34709, 58464, 10521, 538, 42394, 44144, 48602, 32658, 18219, 7672, 47277, 13287, 27184, 12455, 42847, 13403, 24139, 34094, 53046, 2492, 58612, 15782, 57420, 650, 60290, 4014, 60257, 60498, 29729, 15401, 38685, 10746, 18511, 59271, 32250, 12484, 9444, 20899, 49763, 58963, 43942, 20944, 19757, 45254, 31824, 22266, 24470, 62601, 19141, 26459, 7760, 24929, 33344, 19769, 29788, 21171, 56173, 45622, 62557, 51579, 12909, 21953, 47044, 36688, 6309, 17981, 34799, 54757, 27168, 33772, 7010, 60227, 48977, 47615, 58663, 56428, 21638, 57056, 14592, 39539, 6335, 38869, 23940, 44640, 48862, 41200, 10737, 41018, 54393, 7962, 58889, 31008, 31002, 58517, 10871, 37686, 51472, 32677, 30164, 34808, 25383, 2674, 19292, 63723, 43121, 33918, 3378, 45712, 39342, 7382, 36858, 20343, 18898, 4168, 10215, 26612, 44266, 28789, 1044, 23144, 7122, 7202, 9492, 45879, 27560, 5941, 46717, 51034, 41350, 2204, 18689, 10803, 58096, 37576, 58216, 46955, 37290, 46931, 19995, 14756, 35199, 63345, 11086, 5069, 58489, 15583, 21749, 28912, 2466, 2709, 5833, 6385, 19046, 50965, 32959, 37134, 34040, 45474, 29233, 18147, 52251, 39123, 61803, 878, 12609, 11432, 25009, 22670, 57201, 59447, 63238, 12261, 37058, 55868, 50467, 54010, 18805, 24186, 61167, 25058, 39941, 49566, 57222, 34639, 43787, 55033, 35880, 1394, 56913, 31146, 49473, 30498, 55606, 50113, 46680, 47782, 48561, 37916, 20361, 32991, 8091, 57238, 47171, 11736, 27709, 52163, 47247, 40446, 13384, 56912, 8049, 50236, 52619, 23826, 45115, 646, 24380, 19890, 19731, 8490, 5537, 54730, 6514, 2470, 24794, 27844, 26746, 51431, 1739, 2808, 10864, 4146, 58108, 13025, 64634, 7305, 10095, 42954, 14460, 8178, 36760, 37892, 5032, 45119, 39400, 61272, 64355, 14500, 29062, 45816, 30511, 55910, 7939, 38406, 31200, 8517, 48611, 7315, 62496, 14222, 43693, 53414, 27541, 30685, 8009, 27588, 14512, 31750, 33771, 46902, 22445, 51738, 32724, 24165, 18885, 1623, 44868, 6631, 51618, 39629, 32997, 41880, 7271, 61992, 17873, 405, 52669, 20712, 42895, 11365, 36709, 1975, 51826, 18860, 22178, 22077, 27696, 20508, 23985, 5518, 31772, 14439, 34279, 18991, 58662, 3064, 16252, 1893, 46029, 5253, 33309, 38710, 33015, 12641, 1878, 55074, 30975, 40093, 35463, 45262, 40225, 6350, 23974, 36949, 38191, 62090, 13578, 23946, 48424, 18995, 31432, 40875, 49315, 7045, 47290, 4744, 133, 41759, 25263, 19588, 51628, 57596, 21295, 62884, 42516, 35485, 62146, 37216, 62315, 11246, 32398, 42993, 11152, 32135, 60262, 23865, 10526, 49347, 49273, 26802, 7115, 32813, 55396, 53194, 28634, 34379, 11646, 15031, 37814, 36068, 31820, 54882, 14043, 25271, 49195, 33677, 27848, 18825, 54747, 889, 37954, 3445, 32504, 30363, 264, 2908, 52779, 54409, 14444, 11417, 28885, 42393, 21442, 63845, 20, 36204, 59212, 38502, 15414, 17170, 37513, 15150, 60393, 32931, 50075, 1959, 27978, 49910, 20572, 8229, 46874, 15883, 62355, 56988, 4485, 1985, 50731, 50274, 58402, 21423, 13160, 4519, 51823, 32084, 55850, 15567, 40867, 33922, 56956, 39751, 34738, 60566, 42460, 29353, 16685, 19004, 43115, 64946, 39186, 65027, 17530, 52690, 52190, 50580, 24175, 2071, 45836, 50459, 18916, 16623, 47990, 10571, 43241, 12066, 19831, 18288, 13277, 10629, 6276, 4422, 2781, 40057, 42835, 27489, 64166, 31687, 60786, 33138, 18646, 41704, 47605, 53390, 42069, 36848, 52802, 22043, 55324, 28372, 37811, 17762, 50717, 42598, 15219, 56028, 33904, 24455, 30018, 27767, 18957, 50729, 9859, 4564, 21010, 2447, 19198, 1723, 32945, 8773, 2183, 7571, 24009, 51075];

    /**
     * Код клиента, берется из .env
     * @var int 
     */
    private int $account_id;

    /**
     * Пароль клиента, берется из .env
     * @var string
     */
    private string $account_password;

    public ?int $maxCode = null;

    //включить тестовый вывод =true
    public bool $test = false;

    public function __construct($eDostId, $eDostPassword, $eDostMaxCode = null)
    {
        $this->account_id       = $eDostId;
        $this->account_password = $eDostPassword;
        $this->maxCode          = $eDostMaxCode ?: self::DEFAULT_MAX_CODE;
    }

    public static function getStatusMessage(string $statusCode): ?string
    {
        $statusMessages = [
            self::STATUS_INCORRECT_REQUEST  => 'Ошибка в запросе',
            self::STATUS_BLOCKED            => 'Доступ к расчету заблокирован',
            self::STATUS_AUTH_ERROR         => 'Не верные данные магазина (пароль или идентификатор)',
            self::STATUS_WRONG_PARAMS       => 'Не верные входные параметры',
            self::STATUS_WRONG_LOCATION     => 'Не верный город или страна',
            self::STATUS_INTERNAL_ERROR     => 'Внутренняя ошибка сервера расчетов',
            self::STATUS_MISSING_COMPANIES  => 'Не заданы компании доставки в настройках магазина',
            self::STATUS_RESPONSE_ERROR     => 'Сервер расчета не отвечает',
            self::STATUS_LIMIT_EXHAUSTED    => 'Превышен лимит расчетов за день',
            self::STATUS_INCORRECT_WEIGHT   => 'Не указан вес',
            self::STATUS_MISSING_SETTINGS   => 'Не заданы данные магазина (пароль или идентификатор)',
            self::STATUS_REQUEST_ERROR      => 'Настройки сервера не позволяют отправить запрос на расчет',
            self::STATUS_WRONG_CITY         => 'Не верный город отправки',
            self::STATUS_CHANGE_FROM_DENIED => 'Ваш тарифный план не поддерживает возможность изменения города отправки',
            self::STATUS_XML_PARSE_FAIL     => 'Не верный формат XML',
            self::STATUS_OK                 => null,
        ];

        return $statusMessages[$statusCode] ?? 'В данный город автоматический расчет доставки не осуществляется';
    }

    private function countCrc16($data): int
    {
		$crc = 0xFFFF;
		for ($dataIndex = 0; $dataIndex < strlen($data); $dataIndex ++) {
			$x = (($crc >> 8) ^ ord($data[$dataIndex])) & 0xFF;
			$x ^= $x >> 4;
			$crc = (($crc << 8) ^ ($x << 12) ^ ($x << 5) ^ $x) & 0xFFFF;
		}

		return $crc;
	}

    /**
     * Отправка POST запроса к сервису
     *
     * @var $params array Список параметров для отправки
     * @throws HttpRequestException
     */
    private function sendRequest(array $params)
    {
        try {
            $paramsString   = http_build_query($params);

            $serviceUrl     = self::SERVICE_URL;
            $parseUrl       = parse_url($serviceUrl);
            $servicePath    = $parseUrl['path'];
            $serviceHost    = $parseUrl['host'];

            $serviceSocket = fsockopen($serviceHost, 80, $errno, $errMessage, 4);

            if (!empty($errMessage) || empty($serviceSocket)) {
                throw new HttpRequestException('Ошибка: Настройки сервера не позволяют отправить запрос на расчет', 400);
            }

            $paramsStringLength = strlen($paramsString);
            fputs($serviceSocket, <<<HTML
                POST $servicePath HTTP/1.0
                Host: $serviceHost
                Referer: $serviceUrl
                Content-Type: application/x-www-form-urlencoded
                Content-Length: $paramsStringLength
                
                $paramsString
                
                HTML
            );

            $response = '';
            while ($content = fgets($serviceSocket, 512)) {
                $response .= $content;
            }
            fclose($serviceSocket);

            if ($this->test === false) {
                $response = stristr($response, '<?xml version=');
            }

            return $response;
        }
        catch (HttpRequestException $exception) {
            throw $exception;
        }
        catch (Throwable $throwable) {
            throw new RuntimeException($throwable->getMessage());
        }
	}

	//== Расчет стоимости доставки ====================================

    private function cleanFromDigits($string): string
    {
        return trim(preg_replace("/[^0-9]/i", '', $string));
    }

    public function jsonWithStatus($status): array
    {
        return [
            'qty_company'       => 0,
            'stat'              => $status,
            'status_message'    => self::getStatusMessage($status)
        ];
    }

    /**
     * Расчет доставки
     *
     * @param string $toCity Город
     * @param int $weight Вес
     * @param $strah
     * @param $length
     * @param $width
     * @param $height
     * @param string $zip
     * @param ?string $fromCity
     * @return array
     */
    public function calculate(string $toCity, int $weight, $strah, $length, $width, $height, string $zip = '', string $fromCity = null): array
    {
		if ($weight <= 0) {
            return $this->jsonWithStatus(self::STATUS_INCORRECT_WEIGHT);
        }
		if (empty($toCity)) {
            return $this->jsonWithStatus(self::STATUS_INCORRECT_REQUEST);
        }

		$fromCity = $this->cleanFromDigits($fromCity);
		$toCityId = $this->cleanFromDigits($toCity);
		$toCityWithRI = trim(preg_replace("/[^0-9ir]/i",'', $toCity));

		if ($toCity == $toCityWithRI && $toCityId !== '') {
			// Проверяем, может быть передали код города?
            $doNotCount = $toCityId < 1 || $toCityId > $this->maxCode;
		} else {
			//Проверяем контрольную сумму города для расчета, если не совпадает, то даже не посылаем запрос на расчет
            $city = iconv('cp1251', 'utf-8', $toCity);
            $crc16 = $this->countCrc16(mb_strtoupper($city));
            $doNotCount = !in_array($crc16, self::CRC_LIST);
		}
        
        if ($doNotCount) {
            // Не показываем ошибку, но не считаем
            return $this->jsonWithStatus(self::STATUS_INCORRECT_REQUEST);
        }

		// $toCity = str_replace(' ', '%20', $toCity);

        try {
            /* if ($this->emulate) {
                $xml = file_get_contents(__DIR__ . '/../cache.xml');
            } else {*/
            $xml = $this->sendRequest([
                'id'        => $this->account_id,
                'p'         => $this->account_password,
                'to_city'   => $toCity,
                'strah'     => $strah,
                'weight'    => $weight,
                'ln'        => $length,
                'wd'        => $width,
                'hg'        => $height,
                'zip'       => $zip,
                'from_city' => $fromCity,
            ]);

            /* $fp = fopen(__DIR__ . '/../cache.xml', 'wt');
            fwrite($fp, $xml);
            fclose($fp);*/

            if ($this->test === true) {
                echo "<br>=12======<br>($xml) " . self::SERVICE_URL;
            }

            if (empty($xml)) {
                throw new Exception('Пустой ответ');
            }

            $parseIndex = null;
            $curParseElem = null;
            $rz = [];
            $rzOffice = [];
            $status = null;
            $warnings = [];

            $parser = xml_parser_create('UTF-8');
            xml_set_element_handler(
                $parser,
                function ($_, $name) use (&$curParseElem, &$parseIndex) {
                    if (in_array($name, ['tarif', 'office'])) {
                        $curParseElem = [];
                    } else {
                        $parseIndex = $name;
                    }
                },
                function ($_, $name) use (&$curParseElem, &$parseIndex, &$rz, &$rzOffice) {
                    if (is_array($curParseElem)) {
                        if ($name === 'tarif') {
                            $rz[] = $curParseElem[0];
                            $curParseElem = null;
                        }
                        if ($name === 'office') {
                            $rzOffice[] = $curParseElem[0];
                            $curParseElem = null;
                        }
                    }
                    $parseIndex = null;
                }
            );
            xml_set_character_data_handler(
                $parser,
                function ($_, $data) use (&$curParseElem, &$parseIndex, &$status, &$warnings) {
                    if (is_array($curParseElem) && $parseIndex) {
                        if ($existantElem = $curParseElem[$parseIndex] ?? null) {
                            $curParseElem[$parseIndex] = $existantElem[$data];
                        } else {
                            $curParseElem[0][$parseIndex] =$data;
                        }
                    }

                    if (empty(trim($data))) {
                        return;
                    }

                    // статус результата
                    if ($parseIndex === 'stat') {
                        $status = $data;
                    }

                    // предупреждение
                    if ($parseIndex === 'warning') {
                        $warnings[] = $data;
                    }
                }
            );

            $warningsMessages = array_slice([
                'Почтового отделения с указанным индексом НЕ существует!',
                'В вашем регионе НЕТ почтового отделения с указанным индексом!',
            ], count($warnings));

            array_walk($warningsMessages, function (&$warningMessage) {
                $warningMessage = "<b>Предупреждение:</b> $warningMessage<br><br>";
            });

            // если folding включен, то все имена тегов будут переведены в верхний регистр
            xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, false);
            if (!xml_parse($parser, $xml, true)) {
                return $this->jsonWithStatus(self::STATUS_XML_PARSE_FAIL);
            }
            xml_parser_free($parser);

            $result = $this->jsonWithStatus($status);

            if ($status !== self::STATUS_OK) {
                return $result;
            }

            $result['qty_company']=count($rz);
            $i=0;

            //предупреждения
            $result['warning'] = $warnings;
            //echo "<br><pre>".print_r($this->warning, true)."</pre>";
            //echo "<br>------<pre>".print_r($this->rz, true)."</pre>------";

            foreach($rz as $n){
                $i++;
                $result['price'.$i] = preg_replace("/[^0-9.]/i","", substr(trim($n['price']),0,11) );	//цена доставки

                if (!isset($n['day'])) $n['day'] = '&nbsp;';
                $result['day'.$i] = substr(trim($n['day']),0,60);		//срок доставки
                $result['company'.$i] = substr($n['company'],0,80);	//название компании (в 2 раза больше из-за UTF)
                if (!isset($n['name'])) $n['name'] = '';
                $result['name'.$i] = substr(trim($n['name']),0,120);	//название тарифа (в 2 раза больше из-за UTF)
                $result['strah'.$i] = substr(trim($n['strah']),0,1);	//1 - со страховкой, 0 - без
                $result['id'.$i] = substr(trim($n['id']),0,5);			//id

                if (isset($n['priceinfo'])) $result['priceinfo'.$i] = preg_replace("/[^0-9.]/i", "", substr(trim($n['priceinfo']), 0, 11)); // цена доставки для информации (НЕ включается в заказ)

                if (isset($n['pickpointmap'])) $result['pickpointmap'.$i] = preg_replace("/[^a-z_-]/i","", substr(trim($n['pickpointmap']),0,25) ); //код для отображения на карте PickPoint

                if (!isset($n['pricecash'])) $n['pricecash'] = -1;
                $result['pricecash'.$i] = preg_replace("/[^0-9.-]/i","", substr(trim($n['pricecash']),0,11) ); //сумма доставки при наложенном платеже

                if (!isset($n['transfer'])) $n['transfer'] = 0;
                $result['transfer'.$i] = preg_replace("/[^0-9.]/i","", substr(trim($n['transfer']),0,11) ); //сумма доплаты за наложку при получении

                for ($h = 0; $h < count($rzOffice); $h++) {
                    $to_tarif = explode(',',$rzOffice[$h]['to_tarif']); //16,18
                    if ( in_array($result['id'.$i], $to_tarif) ) {
                        $result['office'.$i][] = $rzOffice[$h];
                    }
                }
            }

            return($result);
        }
        catch (RuntimeException $exception) {
            return $this->jsonWithStatus(self::STATUS_REQUEST_ERROR);
        }
        catch (Throwable $exception) {
            return $this->jsonWithStatus(self::STATUS_RESPONSE_ERROR);
        }
	}

    private function parseCity(string $city): string
    {
        $city = iconv('utf-8', 'cp1251', $city);

        return trim(preg_replace("/[^a-z0-9А-я\-(),.' ]/i",'', $city));
    }

    private function parseKg(string $string)
    {
        return $this->removeNonDigitsAndCutAfter($string, 5);
    }

    private function parseToCm(string $string)
    {
        return $this->removeNonDigitsAndCutAfter($string, 8);
    }

    /**
     * Сумма для страховки
     *
     * @param string $string
     * @return int
     */
    private function parseEnsurance(string $string): int
    {
        return $this->removeNonDigitsAndCutAfter($string, 12) ?: 0;
    }

    private function removeNonDigitsAndCutAfter($string, $digits)
    {
        $string = substr($string, 0, $digits);
        $string = preg_replace('/,/', '.', $string);

        return preg_replace('/[^\d.]/', '', $string);
    }

    private function parseZip(?string $string)
    {
        return $string ? preg_replace('/[^a-z0-9А-я\-ёЁ(),.]/i', '', $string) : '';
    }

    /**
     * Расчет стоимости доставки по параметрам пришедшим из POST
     *
     * @var array $postData
     * @var ?string $fromCity
     * @return ?array
     */
    public function calcByArray(array $postData, ?string $fromCity = null): ?array
    {
        if (
            empty($postData['edost_to_city']) ||
            empty($postData['edost_weight']) ||
            empty($postData['edost_strah'])
        ) {
            return null;
        }

        if (
            isset($postData['edost_length'])
            && isset($postData['edost_width'])
            && isset($postData['edost_height'])
        ) {
            $length = $this->parseToCm($postData['edost_length']);
            $width  = $this->parseToCm($postData['edost_width']);
            $height = $this->parseToCm($postData['edost_height']);
        }

        $calculateParams = [
            $this->parseCity($postData['edost_to_city']),
            $this->parseKg($postData['edost_weight']),
            $this->parseEnsurance($postData['edost_strah']),
            $length ?? 0,
            $width ?? 0,
            $height ?? 0,
            $this->parseZip($postData['edost_zip'] ?? null),
            //здесь можно задать код города откуда неоходимо отправить посылку (используется только на специальном тарифном плане)
            $fromCity
        ];

        return $this->calculate(...$calculateParams);
    }
}
